{"version":3,"sources":["store/actionType.ts","store/actionCreators.ts","api/api.ts","store/store.ts","components/CommentItem/CommentItem.tsx","components/CommentList/CommentList.tsx","components/PostItem/PostItem.tsx","components/PostList/PostsList.tsx","components/FilterField/FilterField.tsx","App.tsx","index.tsx"],"names":["actionType","loadPosts","posts","type","loadUsers","users","loadComments","comments","getData","endPoint","fetch","then","response","json","initialState","isLoading","isLoaded","preparedPosts","fieldQuery","showPreparedPost","map","post","user","find","id","userId","filter","comment","postId","store","createStore","state","action","value","applyMiddleware","thunk","CommentItem","className","name","body","email","CommentList","key","PostItem","username","title","PostList","filterPosts","FilterField","setFiledQuery","useState","serachQuery","setSearchQuery","currentSearchQuery","setCurrentSearchQuery","useEffect","setWithDebounce","useMemo","debounce","placeholder","onChange","event","target","preparedPost","includes","connect","dispatch","loadData","a","Promise","all","fieldFilter","props","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e03cd644.chunk.js","sourcesContent":["\nexport const actionType = {\n  IS_LOADED: 'IS_LOADED',\n  IS_LOADING: 'IS_LOADING',\n  LOAD_POSTS: 'LOAD_POSTS',\n  LOAD_USERS: 'LOAD_USERS',\n  LOAD_COMMENTS: 'LOAD_COMMENTS',\n  PREPARED_POSTS: 'PREPARED_POSTS',\n  SET_FILTER_VALUE: 'SET_FILTER_VALUE',\n};\n","import { actionType } from './actionType';\n\n\nexport const isLoadingCreator = (): IsLoadingCreatorInterface => ({\n  type: actionType.IS_LOADING,\n});\n\nexport const isLoadedCreator = (): IsLoadedCreatorInterface => ({\n  type: actionType.IS_LOADED,\n});\n\nexport const loadPosts = (posts: Post[]): LoadPostsInterface => ({\n  type: actionType.LOAD_POSTS,\n  posts,\n});\n\nexport const loadUsers = (users: User[]): LoadUsersInterface => ({\n  type: actionType.LOAD_USERS,\n  users,\n});\n\nexport const loadComments = (comments: Comment[]): LoadCommentsInterface => ({\n  type: actionType.LOAD_COMMENTS,\n  comments,\n});\n\nexport const preparedPosts = (preparedPosts: PostsWithUser[]): PreparedPostInterface => ({\n  type: actionType.PREPARED_POSTS,\n  preparedPosts,\n});\n\nexport const fieldFilter = (value: string): FieldFilterInterface => ({\n  type: actionType.SET_FILTER_VALUE,\n  value,\n});\n\n\ninterface IsLoadingCreatorInterface {\n  type: typeof actionType.IS_LOADING;\n}\n\ninterface IsLoadedCreatorInterface {\n  type: typeof actionType.IS_LOADED;\n}\n\ninterface LoadPostsInterface {\n  type: typeof actionType.LOAD_POSTS;\n  posts: Post[];\n}\n\ninterface LoadUsersInterface {\n  type: typeof actionType.LOAD_USERS;\n  users: User[];\n}\n\ninterface LoadCommentsInterface {\n  type: typeof actionType.LOAD_COMMENTS;\n  comments: Comment[];\n}\n\ninterface PreparedPostInterface {\n  type: typeof actionType.PREPARED_POSTS;\n  preparedPosts: PostsWithUser[];\n}\n\ninterface FieldFilterInterface {\n  type: typeof actionType.SET_FILTER_VALUE;\n  value: string;\n}\n\n\nexport type ActionCreatorsTypes =\n  & IsLoadingCreatorInterface\n  & IsLoadedCreatorInterface\n  & LoadPostsInterface\n  & LoadUsersInterface\n  & LoadCommentsInterface\n  & PreparedPostInterface\n  & FieldFilterInterface;\n","const BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nexport const getData = (endPoint: string) => {\n  return fetch(`${BASE_URL}${endPoint}`)\n    .then(response => response.json());\n};\n","import { createStore, applyMiddleware, AnyAction } from 'redux';\nimport thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';\n\n\nimport { actionType } from './actionType';\nimport {\n  ActionCreatorsTypes,\n  isLoadedCreator,\n  isLoadingCreator,\n  loadComments,\n  loadPosts,\n  loadUsers, preparedPosts,\n} from './actionCreators';\nimport {getData} from '../api/api';\n\nexport const SORT_TYPES = {\n  name: 'name',\n  completed: 'completed',\n  title: 'title',\n};\n\nconst initialState = {\n  isLoading: false,\n  isLoaded: false,\n  users: [],\n  posts: [],\n  comments: [],\n  preparedPosts: [],\n  fieldQuery: '',\n};\n\nconst showPreparedPost = (posts: Post[], users: User[], comments: Comment[]) => {\n  return posts.map((post) => (\n    {\n      ...post,\n      user: users.find((user) => user.id === post.userId) as User,\n      comments: comments.filter((comment) => comment.postId === post.id),\n    }\n  ));\n};\n\nexport const loadData = (): ThunkAction<Promise<void>, {}, {}, AnyAction> => {\n  return async (dispatch: ThunkDispatch< {}, {}, AnyAction>): Promise<void> => {\n    dispatch(isLoadingCreator());\n\n    await Promise.all([\n      getData('posts'),\n      getData('users'),\n      getData('comments'),\n    ]).then(([posts, users, comments]) => {\n      dispatch(loadPosts(posts));\n      dispatch(loadUsers(users));\n      dispatch(loadComments(comments));\n      dispatch(preparedPosts(showPreparedPost(posts, users, comments)))\n    });\n    dispatch(isLoadedCreator());\n  };\n};\n\n\nconst reducer = (state: InitialStateInterface = initialState, action: ActionCreatorsTypes) => { // ActionCreatorsTypes\n  switch (action.type) {\n    case actionType.IS_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n      break;\n\n    case actionType.IS_LOADED:\n      return {\n        ...state,\n        isLoading: false,\n        isLoaded: true,\n      };\n      break;\n\n    case actionType.LOAD_POSTS:\n      return {\n        ...state,\n        posts: action.posts,\n      };\n      break;\n\n    case actionType.LOAD_USERS:\n      return {\n        ...state,\n        users: action.users,\n      };\n      break;\n\n    case actionType.LOAD_COMMENTS:\n      return {\n        ...state,\n        comments: action.comments,\n      };\n      break;\n\n    case actionType.PREPARED_POSTS:\n      return {\n        ...state,\n        preparedPosts: action.preparedPosts,\n      };\n      break;\n\n    case actionType.SET_FILTER_VALUE:\n      return {\n        ...state,\n        fieldQuery: action.value,\n      };\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk),\n);\n","import React, { FC } from 'react';\n\nimport './CommentItem.css';\n\ninterface CommentItemProps {\n  comment: Comment;\n}\n\nexport const CommentItem: FC<CommentItemProps> = ({ comment }) => {\n  return (\n    <div className=\"notification comment-item box is-warning\">\n      <p className=\"comment-item-name\">{ comment.name }</p>\n      <p>{ comment.body }</p>\n      <p className=\"comment-item-email\">{ comment.email }</p>\n    </div>\n  );\n};\n","import React, {FC} from 'react';\nimport {CommentItem} from '../CommentItem/CommentItem';\n\ninterface CommentListProps {\n  comments: Comment[];\n}\n\nexport const CommentList: FC<CommentListProps> = ({ comments }) => {\n  return (\n    <div className=\"post-item-comments-container\">\n      {\n        comments.map(comment => (\n          <CommentItem key={comment.id} comment={comment} />\n        ))\n      }\n    </div>\n  )\n};\n","import React, { FC } from 'react';\nimport { CommentList } from '../CommentList/CommentList';\nimport 'bulma';\n\nimport './PostItem.css';\n\ninterface PostsItemProps {\n  post: PostsWithUser;\n}\n\nexport const PostItem: FC<PostsItemProps> = ({ post }) => {\n\n  return (\n    <div className=\"box post-item\">\n      <div className=\"post-item-header\">\n        <p className=\"post-item-header-item\">{post.user.name}</p>\n        <p className=\"post-item-header-item\">{post.user.username}</p>\n      </div>\n\n      <div className=\"post-item-description notification\">\n        <p className=\"post-item-header-title\">{post.title}</p>\n        <p className=\"post-item-header-description\">{post.body}</p>\n      </div>\n\n      <CommentList comments={post.comments} />\n    </div>\n  );\n};\n","import React, {FC} from 'react';\nimport { PostItem } from '../PostItem/PostItem';\n\nimport './PostList.css';\n\ninterface PostListProps {\n  filterPosts: PostsWithUser[];\n}\n\nexport const PostList: FC<PostListProps> = ({ filterPosts }) => {\n  return (\n    <div className=\"post-list\">\n      {\n        filterPosts.map(post => (\n          <PostItem key={post.id} post={post} />\n        ))\n      }\n    </div>\n  );\n};\n","import React, {ChangeEvent, FC, useEffect, useMemo, useState} from 'react';\n// @ts-ignore\nimport debounce from 'lodash/debounce';\n\nimport './FilterField.css';\n\ninterface FilterFieldInterface {\n  setFiledQuery: (arg0: string) => void;\n}\n\nexport const FilterField: FC<FilterFieldInterface> = ({ setFiledQuery }) => {\n  const [serachQuery, setSearchQuery] = useState('');\n  const [currentSearchQuery, setCurrentSearchQuery] = useState('');\n\n  useEffect(() => {\n    setFiledQuery(serachQuery);\n  }, [serachQuery]);\n\n  const setWithDebounce = useMemo(\n    () => debounce(setSearchQuery, 500),\n    [serachQuery],\n  );\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setCurrentSearchQuery(event.target.value);\n    setWithDebounce(event.target.value);\n  };\n\n  return (\n    <div className=\"field filter-field\">\n      <div className=\"control\">\n        <input\n          className=\"input is-medium is-rounded\"\n          type=\"text\"\n          placeholder=\"Search...\"\n          value={currentSearchQuery}\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { connect } from 'react-redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { AnyAction } from 'redux';\n\nimport './App.css';\nimport { loadData } from './store/store';\nimport { PostList } from './components/PostList/PostsList';\nimport { FilterField } from './components/FilterField/FilterField';\nimport {fieldFilter} from './store/actionCreators';\n\n\ninterface AppProps {\n  isLoaded: boolean;\n  isLoading: boolean;\n  loadData: () => void;\n  filterPosts: PostsWithUser[];\n  setFiledQuery: (arg0: string) => void;\n}\n\nconst App: FC<AppProps> = (props) => {\n  const {\n    isLoaded,\n    isLoading,\n    filterPosts,\n    loadData,\n    setFiledQuery,\n  } = props;\n\n  const handleClick = () => {\n    loadData();\n  };\n\n  return (\n    <div className={`app ${isLoaded ? 'app-loaded' : ''}`}>\n      <h1 className=\"title is-1\">Hello Mate!</h1>\n      {\n        isLoaded\n          ? (\n            <>\n              <FilterField setFiledQuery={setFiledQuery} />\n              <PostList filterPosts={filterPosts} />\n            </>\n          )\n          : (\n            <button type=\"button\" onClick={handleClick} className=\"button is-primary is-outlined\">\n              Load Data\n            </button>\n          )\n      }\n\n      {\n        isLoading\n          && (\n            <p>is Loading...</p>\n          )\n      }\n    </div>\n  );\n};\n\n\nconst filterPosts = (state: InitialStateInterface) => {\n  const preparedPost = state.preparedPosts;\n  const { fieldQuery } = state;\n\n  return preparedPost\n    .filter(post => post.body.includes(fieldQuery) || post.title.includes(fieldQuery));\n};\n\nconst mapStateToProps = (state: InitialStateInterface) => ({\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  filterPosts: filterPosts(state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch< {}, {}, AnyAction>) => ({\n  loadData: () => dispatch(loadData()),\n  setFiledQuery: (value: string) => dispatch(fieldFilter(value)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}